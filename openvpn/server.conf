#OpenVPN server config
local 0.0.0.0
port  1194 

# TCP or UDP server?
;proto tcp
proto udp

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
;dev tap
dev tun

# The MTU (Maximum Transmission Units) is the
# maximum datagram size in bytes that can be sent
# --tun-mtu 1500 --fragment 1300 --mssfix
tun-mtu 1500
fragment 1300
mssfix

# Password renegotiation interval,
# setting to 0 will never expire
reneg-sec 0

# SSL/TLS
tls-server
ca ca.crt
cert server.crt
key server.key
dh dh2048.pem

# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
tls-auth ta.key 0

# Network topology
# Should be subnet (addressing via IP)
topology subnet

# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1.
server 10.8.0.0 255.255.0.0

# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned.
ifconfig-pool-persist ipp.txt

# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
;push "route 192.168.10.0 255.255.255.0"
;push "route 192.168.20.0 255.255.255.0"
push "route 10.1.0.0 255.255.0.0"
push "route 10.2.0.0 255.255.0.0"
push "route 169.254.169.253"

# Push DHCP Options to client
# DNS will push DNS to use
# 169.254.169.253 is for AWS
# DOMAIN will push search domain
push "dhcp-option DNS 169.254.169.253"
push "dhcp-option DNS 10.0.0.2"
push "dhcp-option DOMAIN myawsdomain"

# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
;client-to-client

# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive 10 120

# Select a cryptographic cipher.
# This config item must be copied to
# the client config file as well.
cipher AES-256-CBC

# Enable compression on the VPN link and push the
# option to the client
;compress lz4-v2
;push "compress lz4-v2"

# The maximum number of concurrently connected
# clients we want to allow.
;max-clients 100

# Certificate Revocation List 
# will block the connection for user
# with the certificate in this file
crl-verify crl.pem

# The openvpn-auth-pam module implements username/password
# authentication via PAM
plugin /usr/lib64/openvpn/plugins/openvpn-plugin-auth-pam.so /etc/pam.d/login

# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
user nobody
group nobody

# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
persist-key
persist-tun

# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
status openvpn-status.log

# By default, log messages will go to the syslog
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
;log         openvpn.log
log-append  /var/log/openvpn/openvpn.log

# Set the appropriate level of log
# file verbosity.
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb 3

# Notify the client that when the server restarts so it
# can automatically reconnect.
explicit-exit-notify 1
